From 0b7b1784a87eacca43603d8bd39fd08f00718b71 Mon Sep 17 00:00:00 2001
From: Danny Lin <danny@kdrag0n.dev>
Date: Wed, 7 Oct 2020 00:24:54 -0700
Subject: [PATCH 1/6] init: Set properties to make SafetyNet pass

Google's SafetyNet integrity checks will check the values of these
properties when performing basic attestation. Setting fake values helps
us pass basic SafetyNet with no Magisk Hide or kernel patches necessary.

Note that these properties need to be set very early, before parsing the
kernel command-line, as they are read-only properties that the bootloader
sets using androidboot kernel arguments. The bootloader's real values
cause SafetyNet to fail with an unlocked bootloader and/or custom
software because the verified boot chain is broken in that case.

Change-Id: I66d23fd91d82906b00d5eb020668f01ae83ec31f
Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
---
 init/property_service.cpp | 15 +++++++++++++++
 1 file changed, 15 insertions(+)

diff --git a/init/property_service.cpp b/init/property_service.cpp
index 8db414a97cc..d23c333d1bb 100644
--- a/init/property_service.cpp
+++ b/init/property_service.cpp
@@ -1286,6 +1286,15 @@ static void ProcessBootconfig() {
     });
 }
 
+static void SetSafetyNetProps() {
+
+    InitPropertySet("ro.boot.flash.locked", "1");
+    InitPropertySet("ro.boot.vbmeta.device_state", "locked");
+    InitPropertySet("ro.boot.verifiedbootstate", "green");
+    InitPropertySet("ro.boot.veritymode", "enforcing");
+
+}
+
 void PropertyInit() {
     selinux_callback cb;
     cb.func_audit = PropertyAuditCallback;
@@ -1300,6 +1309,12 @@ void PropertyInit() {
         LOG(FATAL) << "Failed to load serialized property info file";
     }
 
+    // Report a valid verified boot chain to make Google SafetyNet integrity
+    // checks pass. This needs to be done before parsing the kernel cmdline as
+    // these properties are read-only and will be set to invalid values with
+    // androidboot cmdline arguments.
+    SetSafetyNetProps();
+
     // If arguments are passed both on the command line and in DT,
     // properties set in DT always have priority over the command-line ones.
     ProcessKernelDt();

From fde523835e9e4eb18af95181e921cae388083737 Mon Sep 17 00:00:00 2001
From: Jarl-Penguin <jarlpenguin@outlook.com>
Date: Wed, 16 Jun 2021 11:28:46 +0000
Subject: [PATCH 2/6] init: Don't spoof SafetyNet properties in recovery mode

Change-Id: Ib6d3808c3b8f3e0cffab685a24d3cdd436b0fe9b
Signed-off-by: neobuddy89 <neobuddy89@gmail.com>
Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
---
 init/property_service.cpp | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/init/property_service.cpp b/init/property_service.cpp
index d23c333d1bb..257fa4e10cd 100644
--- a/init/property_service.cpp
+++ b/init/property_service.cpp
@@ -1313,7 +1313,9 @@ void PropertyInit() {
     // checks pass. This needs to be done before parsing the kernel cmdline as
     // these properties are read-only and will be set to invalid values with
     // androidboot cmdline arguments.
-    SetSafetyNetProps();
+    if (!IsRecoveryMode()) {
+        SetSafetyNetProps();
+    }
 
     // If arguments are passed both on the command line and in DT,
     // properties set in DT always have priority over the command-line ones.

From fb0d22911a868d3e7413cd39c7897b1a04d07738 Mon Sep 17 00:00:00 2001
From: Danny Lin <danny@kdrag0n.dev>
Date: Tue, 12 Oct 2021 02:32:41 -0700
Subject: [PATCH 3/6] fastboot: Revert to Android 11 method of checking lock
 status

Now that we're setting system-wide properties for SafetyNet, which
includes ro.boot.verifiedbootstate=green, fastbootd always detects the
bootloader as being locked. Revert to the Android 11 method of reading
directly from the kernel cmdline to work arround the issue.

Change-Id: I57f6d48acddb29748778053edf354d7bd8994bd7
Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
---
 fastboot/device/utility.cpp | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/fastboot/device/utility.cpp b/fastboot/device/utility.cpp
index 3302c4310c9..a14eea37662 100644
--- a/fastboot/device/utility.cpp
+++ b/fastboot/device/utility.cpp
@@ -196,7 +196,12 @@ std::vector<std::string> ListPartitions(FastbootDevice* device) {
 }
 
 bool GetDeviceLockStatus() {
-    return android::base::GetProperty("ro.boot.verifiedbootstate", "") != "orange";
+    std::string cmdline;
+    // Return lock status true if unable to read kernel command line.
+    if (!android::base::ReadFileToString("/proc/cmdline", &cmdline)) {
+        return true;
+    }
+    return cmdline.find("androidboot.verifiedbootstate=orange") == std::string::npos;
 }
 
 bool UpdateAllPartitionMetadata(FastbootDevice* device, const std::string& super_name,

From ee32a6192c9c910b971b361a03176b04a3f3a211 Mon Sep 17 00:00:00 2001
From: Alex Naidis <alex.naidis@linux.com>
Date: Sun, 9 Apr 2017 01:29:27 +0200
Subject: [PATCH 4/6] init: Weaken property override security for the init
 extension

Sometimes we need to override ro.* properties by using our vendor init
extension.

Previously there was a security check which was blocking that.
To resolve the issue, we need to weaken the security check during the
execution of our vendor init extension.

This is safe because the vendor init extension gets executed as part of init
construction and it is considered a trusted system component.

Change-Id: I6198b453745cb92c65d3e3d49e3262354cddd2a2
Signed-off-by: Alex Naidis <alex.naidis@linux.com>
Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
---
 init/property_service.cpp | 12 ++++++++++--
 1 file changed, 10 insertions(+), 2 deletions(-)

diff --git a/init/property_service.cpp b/init/property_service.cpp
index 257fa4e10cd..a7aebad8293 100644
--- a/init/property_service.cpp
+++ b/init/property_service.cpp
@@ -119,6 +119,8 @@ struct PropertyAuditData {
     const char* name;
 };
 
+static bool weaken_prop_override_security = false;
+
 static int PropertyAuditCallback(void* data, security_class_t /*cls*/, char* buf, size_t len) {
     auto* d = reinterpret_cast<PropertyAuditData*>(data);
 
@@ -189,8 +191,8 @@ static uint32_t PropertySet(const std::string& name, const std::string& value, s
 
     prop_info* pi = (prop_info*) __system_property_find(name.c_str());
     if (pi != nullptr) {
-        // ro.* properties are actually "write-once".
-        if (StartsWith(name, "ro.")) {
+        // ro.* properties are actually "write-once", unless the system decides to
+        if (StartsWith(name, "ro.") && !weaken_prop_override_security) {
             *error = "Read-only property was already set";
             return PROP_ERROR_READ_ONLY_PROPERTY;
         }
@@ -1133,6 +1135,9 @@ void PropertyLoadBootDefaults() {
         }
     }
 
+    // Weaken property override security during execution of the vendor init extension
+    weaken_prop_override_security = true;
+
     // Update with vendor-specific property runtime overrides
     vendor_load_properties();
 
@@ -1143,6 +1148,9 @@ void PropertyLoadBootDefaults() {
     property_initialize_ro_cpu_abilist();
     property_initialize_ro_vendor_api_level();
 
+    // Restore the normal property override security after init extension is executed
+    weaken_prop_override_security = false;
+
     update_sys_usb_config();
 }
 

From 045654b7c1cd03501d9827daba72b540043c59dc Mon Sep 17 00:00:00 2001
From: spezi77 <spezi7713@gmx.net>
Date: Fri, 15 Jan 2021 20:22:02 +0100
Subject: [PATCH 5/6] init: Add more properties to spoof.

Signed-off-by: neobuddy89 <neobuddy89@gmail.com>
Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
---
 init/property_service.cpp | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/init/property_service.cpp b/init/property_service.cpp
index a7aebad8293..d1bc720563d 100644
--- a/init/property_service.cpp
+++ b/init/property_service.cpp
@@ -1300,6 +1300,17 @@ static void SetSafetyNetProps() {
     InitPropertySet("ro.boot.vbmeta.device_state", "locked");
     InitPropertySet("ro.boot.verifiedbootstate", "green");
     InitPropertySet("ro.boot.veritymode", "enforcing");
+    InitPropertySet("ro.boot.veritymode", "enforcing");
+    InitPropertySet("ro.boot.warranty_bit", "0");
+    InitPropertySet("ro.warranty_bit", "0");
+    InitPropertySet("ro.debuggable", "0");
+    InitPropertySet("ro.secure", "1");
+    InitPropertySet("ro.build.type", "user");
+    InitPropertySet("ro.build.tags", "release-keys");
+    InitPropertySet("ro.vendor.boot.warranty_bit", "0");
+    InitPropertySet("ro.vendor.warranty_bit", "0");
+    InitPropertySet("vendor.boot.vbmeta.device_state", "locked");
+    InitPropertySet("vendor.boot.verifiedbootstate", "green");
 
 }
 

From 85b04c2908ce9aaa80145f6a0eaeac05d2656242 Mon Sep 17 00:00:00 2001
From: Pranav Vashi <neobuddy89@gmail.com>
Date: Fri, 22 Oct 2021 04:07:18 +0530
Subject: [PATCH 6/6] init: Do not set safety net props for ENG builds

Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
---
 init/Android.bp           | 6 ++++++
 init/property_service.cpp | 6 ++++--
 2 files changed, 10 insertions(+), 2 deletions(-)

diff --git a/init/Android.bp b/init/Android.bp
index 3df0e917c7a..25669312626 100644
--- a/init/Android.bp
+++ b/init/Android.bp
@@ -130,6 +130,7 @@ libinit_cc_defaults {
         "-DSHUTDOWN_ZERO_TIMEOUT=0",
         "-DINIT_FULL_SOURCES",
         "-DINSTALL_DEBUG_POLICY_TO_SYSTEM_EXT=0",
+        "-DSPOOF_SAFETYNET=1",
     ],
     product_variables: {
         debuggable: {
@@ -152,6 +153,8 @@ libinit_cc_defaults {
             cppflags: [
                 "-USHUTDOWN_ZERO_TIMEOUT",
                 "-DSHUTDOWN_ZERO_TIMEOUT=1",
+                "-USPOOF_SAFETYNET",
+                "-DSPOOF_SAFETYNET=0",
             ],
         },
         uml: {
@@ -388,6 +391,7 @@ cc_binary {
         "-DSHUTDOWN_ZERO_TIMEOUT=0",
         "-DLOG_UEVENTS=0",
         "-DSEPOLICY_VERSION=30", // TODO(jiyong): externalize the version number
+        "-DSPOOF_SAFETYNET=1",
     ],
 
     product_variables: {
@@ -417,6 +421,8 @@ cc_binary {
             cflags: [
                 "-USHUTDOWN_ZERO_TIMEOUT",
                 "-DSHUTDOWN_ZERO_TIMEOUT=1",
+                "-USPOOF_SAFETYNET",
+                "-DSPOOF_SAFETYNET=0",
             ],
         },
     },
diff --git a/init/property_service.cpp b/init/property_service.cpp
index d1bc720563d..c41c88462ce 100644
--- a/init/property_service.cpp
+++ b/init/property_service.cpp
@@ -1332,8 +1332,10 @@ void PropertyInit() {
     // checks pass. This needs to be done before parsing the kernel cmdline as
     // these properties are read-only and will be set to invalid values with
     // androidboot cmdline arguments.
-    if (!IsRecoveryMode()) {
-        SetSafetyNetProps();
+    if (SPOOF_SAFETYNET) {
+        if (!IsRecoveryMode()) {
+            SetSafetyNetProps();
+        }
     }
 
     // If arguments are passed both on the command line and in DT,

From 940d9a3596f7d47c3049f34d33b5319f0f04c510 Mon Sep 17 00:00:00 2001
From: Pranav Vashi <neobuddy89@gmail.com>
Date: Sat, 3 Sep 2022 15:14:12 +0530
Subject: [PATCH] init: Update properties for snet spoof

Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
---
 init/property_service.cpp | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/init/property_service.cpp b/init/property_service.cpp
index c41c88462ce..44ca246328d 100644
--- a/init/property_service.cpp
+++ b/init/property_service.cpp
@@ -1300,13 +1300,14 @@ static void SetSafetyNetProps() {
     InitPropertySet("ro.boot.vbmeta.device_state", "locked");
     InitPropertySet("ro.boot.verifiedbootstate", "green");
     InitPropertySet("ro.boot.veritymode", "enforcing");
-    InitPropertySet("ro.boot.veritymode", "enforcing");
     InitPropertySet("ro.boot.warranty_bit", "0");
     InitPropertySet("ro.warranty_bit", "0");
     InitPropertySet("ro.debuggable", "0");
     InitPropertySet("ro.secure", "1");
     InitPropertySet("ro.build.type", "user");
+    InitPropertySet("ro.build.keys", "release-keys");
     InitPropertySet("ro.build.tags", "release-keys");
+    InitPropertySet("ro.system.build.tags", "release-keys");
     InitPropertySet("ro.vendor.boot.warranty_bit", "0");
     InitPropertySet("ro.vendor.warranty_bit", "0");
     InitPropertySet("vendor.boot.vbmeta.device_state", "locked");

From 99a61b22b7a0ffe264489591bf4f0a8629367417 Mon Sep 17 00:00:00 2001
From: Matt Filetto <matt.filetto@gmail.com>
Date: Sun, 23 Jan 2022 06:05:32 -0800
Subject: [PATCH] fastboot: stop trying to determine bootloader unlock status
 from /proc/cmdline

* raven (and others i'm sure) still has no read access to /proc/cmdline even
  with an unlocked bootloader. This check was failing and broke writing to
  partitions.

Signed-off-by: Matt Filetto <matt.filetto@gmail.com>
Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
---
 fastboot/device/utility.cpp | 7 +------
 1 file changed, 1 insertion(+), 6 deletions(-)

diff --git a/fastboot/device/utility.cpp b/fastboot/device/utility.cpp
index a14eea37662..3302c4310c9 100644
--- a/fastboot/device/utility.cpp
+++ b/fastboot/device/utility.cpp
@@ -196,12 +196,7 @@ std::vector<std::string> ListPartitions(FastbootDevice* device) {
 }
 
 bool GetDeviceLockStatus() {
-    std::string cmdline;
-    // Return lock status true if unable to read kernel command line.
-    if (!android::base::ReadFileToString("/proc/cmdline", &cmdline)) {
-        return true;
-    }
-    return cmdline.find("androidboot.verifiedbootstate=orange") == std::string::npos;
+    return android::base::GetProperty("ro.boot.verifiedbootstate", "") != "orange";
 }
 
 bool UpdateAllPartitionMetadata(FastbootDevice* device, const std::string& super_name
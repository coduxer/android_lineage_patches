From e45cc3290cc0903caead32fe7146bdba5bab6003 Mon Sep 17 00:00:00 2001
From: coduxer <coduxer@gmail.com>
Date: Wed, 9 Nov 2022 17:32:50 +0200
Subject: [PATCH] [PATCH] Add 3 finger swipe screenshot

Change-Id: I75a4961ae4fe544fc8fc46141339d8ae3c6a75a6
---
 core/java/android/app/IActivityManager.aidl   |   5 +
 core/java/android/view/ViewRootImpl.java      |  14 ++
 .../server/am/ActivityManagerService.java     |  41 +++++
 .../server/policy/PhoneWindowManager.java     |  28 ++++
 .../policy/SwipeToScreenshotListener.java     | 148 ++++++++++++++++++
 5 files changed, 236 insertions(+)
 create mode 100644 services/core/java/com/android/server/policy/SwipeToScreenshotListener.java

diff --git a/core/java/android/app/IActivityManager.aidl b/core/java/android/app/IActivityManager.aidl
index 8367441b1b95..18e1b0ff9a9b 100644
--- a/core/java/android/app/IActivityManager.aidl
+++ b/core/java/android/app/IActivityManager.aidl
@@ -751,6 +751,11 @@ interface IActivityManager {
     /** Blocks until all broadcast queues become idle. */
     void waitForBroadcastIdle();
 
+    /**
+     *  Should disable touch if three fingers to screen shot is active?
+     */
+    boolean isSwipeToScreenshotGestureActive();
+
     /**
      * @return The reason code of whether or not the given UID should be exempted from background
      * restrictions here.
diff --git a/core/java/android/view/ViewRootImpl.java b/core/java/android/view/ViewRootImpl.java
index a13872eef6b8..7b5c6aa9007b 100644
--- a/core/java/android/view/ViewRootImpl.java
+++ b/core/java/android/view/ViewRootImpl.java
@@ -6543,6 +6543,11 @@ public final class ViewRootImpl implements ViewParent,
             final MotionEvent event = (MotionEvent)q.mEvent;
             mHandwritingInitiator.onTouchEvent(event);
 
+            if (event.getPointerCount() == 3 && isSwipeToScreenshotGestureActive()) {
+                event.setAction(MotionEvent.ACTION_CANCEL);
+                Log.d("teste", "canceling motionEvent because of threeGesture detecting");
+            }
+
             mAttachInfo.mUnbufferedDispatchRequested = false;
             mAttachInfo.mHandlingPointerEvent = true;
             boolean handled = mView.dispatchPointerEvent(event);
@@ -10980,4 +10985,13 @@ public final class ViewRootImpl implements ViewParent,
         }
         mSurfaceSyncer.merge(mSyncId, syncId, otherSyncer);
     }
+
+    private boolean isSwipeToScreenshotGestureActive() {
+        try {
+            return ActivityManager.getService().isSwipeToScreenshotGestureActive();
+        } catch (RemoteException e) {
+            Log.e("teste", "isSwipeToScreenshotGestureActive exception", e);
+            return false;
+        }
+    }
 }
diff --git a/services/core/java/com/android/server/am/ActivityManagerService.java b/services/core/java/com/android/server/am/ActivityManagerService.java
index a78c64b6538d..e2fb5b242188 100644
--- a/services/core/java/com/android/server/am/ActivityManagerService.java
+++ b/services/core/java/com/android/server/am/ActivityManagerService.java
@@ -428,6 +428,8 @@ import com.android.server.wm.WindowProcessController;
 import dalvik.annotation.optimization.NeverCompile;
 import dalvik.system.VMRuntime;
 
+import lineageos.providers.LineageSettings;
+
 import libcore.util.EmptyArray;
 
 import java.io.File;
@@ -1555,6 +1557,10 @@ public class ActivityManagerService extends IActivityManager.Stub
 
     static final HostingRecord sNullHostingRecord =
             new HostingRecord(HostingRecord.HOSTING_TYPE_EMPTY);
+
+    final SwipeToScreenshotObserver mSwipeToScreenshotObserver;
+    private boolean mIsSwipeToScrenshotEnabled;
+
     /**
      * Used to notify activity lifecycle events.
      */
@@ -2349,6 +2355,7 @@ public class ActivityManagerService extends IActivityManager.Stub
         mPendingStartActivityUids = new PendingStartActivityUids(mContext);
         mUseFifoUiScheduling = false;
         mEnableOffloadQueue = false;
+        mSwipeToScreenshotObserver = null;
         mFgBroadcastQueue = mBgBroadcastQueue = mBgOffloadBroadcastQueue =
                 mFgOffloadBroadcastQueue = null;
         mComponentAliasResolver = new ComponentAliasResolver(this);
@@ -2483,6 +2490,7 @@ public class ActivityManagerService extends IActivityManager.Stub
 
         mInternal = new LocalService();
         mPendingStartActivityUids = new PendingStartActivityUids(mContext);
+        mSwipeToScreenshotObserver = new SwipeToScreenshotObserver(mHandler, mContext);
         mTraceErrorLogger = new TraceErrorLogger();
         mComponentAliasResolver = new ComponentAliasResolver(this);
     }
@@ -8031,6 +8039,7 @@ public class ActivityManagerService extends IActivityManager.Stub
         }
         mAppErrors.loadAppsNotReportingCrashesFromConfig(res.getString(
                 com.android.internal.R.string.config_appsNotReportingCrashes));
+        mSwipeToScreenshotObserver.registerObserver();
     }
 
     /**
@@ -18405,6 +18414,32 @@ public class ActivityManagerService extends IActivityManager.Stub
         }
     }
 
+    private class SwipeToScreenshotObserver extends ContentObserver {
+
+        private final Context mContext;
+
+        public SwipeToScreenshotObserver(Handler handler, Context context) {
+            super(handler);
+            mContext = context;
+        }
+
+        public void registerObserver() {
+            mContext.getContentResolver().registerContentObserver(
+                    LineageSettings.System.getUriFor(LineageSettings.System.THREE_FINGER_GESTURE),
+                    false, this, UserHandle.USER_ALL);
+            update();
+        }
+
+        private void update() {
+            mIsSwipeToScrenshotEnabled = LineageSettings.System.getIntForUser(mContext.getContentResolver(),
+                    LineageSettings.System.THREE_FINGER_GESTURE, 0, UserHandle.USER_CURRENT) == 1;
+        }
+
+        public void onChange(boolean selfChange) {
+            update();
+        }
+    }
+
     @Override
     public boolean isAppFreezerSupported() {
         final long token = Binder.clearCallingIdentity();
@@ -18477,4 +18512,10 @@ public class ActivityManagerService extends IActivityManager.Stub
             Trace.traceBegin(traceTag, methodName + subInfo);
         }
     }
+
+    public boolean isSwipeToScreenshotGestureActive() {
+        synchronized (this) {
+            return mIsSwipeToScrenshotEnabled && SystemProperties.getBoolean("sys.android.screenshot", false);
+        }
+    }
 }
diff --git a/services/core/java/com/android/server/policy/PhoneWindowManager.java b/services/core/java/com/android/server/policy/PhoneWindowManager.java
index 750010d99531..ddd7c18d5d53 100644
--- a/services/core/java/com/android/server/policy/PhoneWindowManager.java
+++ b/services/core/java/com/android/server/policy/PhoneWindowManager.java
@@ -594,6 +594,8 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     boolean mPendingCapsLockToggle;
 
     private int mForceNavbar = -1;
+    private SwipeToScreenshotListener mSwipeToScreenshot;
+    private boolean haveEnableGesture = false;
 
     // Tracks user-customisable behavior for certain key events
     private Action mBackLongPressAction;
@@ -943,6 +945,9 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             resolver.registerContentObserver(LineageSettings.System.getUriFor(
                     LineageSettings.System.VOLUME_ANSWER_CALL), false, this,
                     UserHandle.USER_ALL);
+            resolver.registerContentObserver(LineageSettings.System.getUriFor(
+                    LineageSettings.System.THREE_FINGER_GESTURE), false, this,
+                    UserHandle.USER_ALL);
 
             updateSettings();
         }
@@ -2861,6 +2866,19 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                 }
             }
 
+            boolean threeFingerGesture = LineageSettings.System.getIntForUser(resolver,
+                    LineageSettings.System.THREE_FINGER_GESTURE, 0, UserHandle.USER_CURRENT) == 1;
+            if (mSwipeToScreenshot != null) {
+                if (haveEnableGesture != threeFingerGesture) {
+                    haveEnableGesture = threeFingerGesture;
+                    if (haveEnableGesture) {
+                        mWindowManagerFuncs.registerPointerEventListener(mSwipeToScreenshot, DEFAULT_DISPLAY);
+                    } else {
+                        mWindowManagerFuncs.unregisterPointerEventListener(mSwipeToScreenshot, DEFAULT_DISPLAY);
+                    }
+                }
+            }
+
             updateKeyAssignments();
 
             // use screen off timeout setting as the timeout for the lockscreen
@@ -5691,6 +5709,13 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         }
 
         mLineageHardware = LineageHardwareManager.getInstance(mContext);
+        mSwipeToScreenshot = new SwipeToScreenshotListener(mContext, new SwipeToScreenshotListener.Callbacks() {
+            @Override
+            public void onSwipeThreeFinger() {
+                interceptScreenshotChord(TAKE_SCREENSHOT_FULLSCREEN, SCREENSHOT_KEY_OTHER, 0 /*pressDelay*/);
+            }
+        });
+
         // Ensure observe happens in systemReady() since we need
         // LineageHardwareService to be up and running
         mSettingsObserver.observe();
diff --git a/services/core/java/com/android/server/policy/SwipeToScreenshotListener.java b/services/core/java/com/android/server/policy/SwipeToScreenshotListener.java
new file mode 100644
index 000000000000..88a465b6c382
--- /dev/null
+++ b/services/core/java/com/android/server/policy/SwipeToScreenshotListener.java
@@ -0,0 +1,148 @@
+/*
+ * Copyright (C) 2019 The PixelExperience Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server.policy;
+
+import android.content.Context;
+import android.os.SystemProperties;
+import android.provider.Settings;
+import android.util.Log;
+import android.util.DisplayMetrics;
+import android.view.MotionEvent;
+import android.view.WindowManagerPolicyConstants.PointerEventListener;
+
+public class SwipeToScreenshotListener implements PointerEventListener {
+    private static final String TAG = "SwipeToScreenshotListener";
+    private static final int THREE_GESTURE_STATE_NONE = 0;
+    private static final int THREE_GESTURE_STATE_DETECTING = 1;
+    private static final int THREE_GESTURE_STATE_DETECTED_FALSE = 2;
+    private static final int THREE_GESTURE_STATE_DETECTED_TRUE = 3;
+    private static final int THREE_GESTURE_STATE_NO_DETECT = 4;
+    private boolean mBootCompleted;
+    private Context mContext;
+    private boolean mDeviceProvisioned = false;
+    private float[] mInitMotionY;
+    private int[] mPointerIds;
+    private int mThreeGestureState = THREE_GESTURE_STATE_NONE;
+    private int mThreeGestureThreshold;
+    private int mThreshold;
+    private final Callbacks mCallbacks;
+    DisplayMetrics mDisplayMetrics;
+
+    public SwipeToScreenshotListener(Context context, Callbacks callbacks) {
+        mPointerIds = new int[3];
+        mInitMotionY = new float[3];
+        mContext = context;
+        mCallbacks = callbacks;
+        mDisplayMetrics = mContext.getResources().getDisplayMetrics();
+        mThreshold = (int) (50.0f * mDisplayMetrics.density);
+        mThreeGestureThreshold = mThreshold * 3;
+    }
+
+    @Override
+    public void onPointerEvent(MotionEvent event) {
+        if (!mBootCompleted) {
+            mBootCompleted = SystemProperties.getBoolean("sys.boot_completed", false);
+            return;
+        }
+        if (!mDeviceProvisioned) {
+            mDeviceProvisioned = Settings.Global.getInt(mContext.getContentResolver(),
+                Settings.Global.DEVICE_PROVISIONED, 0) != 0;
+            return;
+        }
+        if (event.getAction() == 0) {
+            changeThreeGestureState(THREE_GESTURE_STATE_NONE);
+        } else if (mThreeGestureState == THREE_GESTURE_STATE_NONE && event.getPointerCount() == 3) {
+            if (checkIsStartThreeGesture(event)) {
+                changeThreeGestureState(THREE_GESTURE_STATE_DETECTING);
+                for (int i = 0; i < 3; i++) {
+                    mPointerIds[i] = event.getPointerId(i);
+                    mInitMotionY[i] = event.getY(i);
+                }
+            } else {
+                changeThreeGestureState(THREE_GESTURE_STATE_NO_DETECT);
+            }
+        }
+        if (mThreeGestureState == THREE_GESTURE_STATE_DETECTING) {
+            if (event.getPointerCount() != 3) {
+                changeThreeGestureState(THREE_GESTURE_STATE_DETECTED_FALSE);
+                return;
+            }
+            if (event.getActionMasked() == MotionEvent.ACTION_MOVE) {
+                float distance = 0.0f;
+                int i = 0;
+                while (i < 3) {
+                    int index = event.findPointerIndex(mPointerIds[i]);
+                    if (index < 0 || index >= 3) {
+                        changeThreeGestureState(THREE_GESTURE_STATE_DETECTED_FALSE);
+                        return;
+                    } else {
+                        distance += event.getY(index) - mInitMotionY[i];
+                        i++;
+                    }
+                }
+                if (distance >= ((float) mThreeGestureThreshold)) {
+                    changeThreeGestureState(THREE_GESTURE_STATE_DETECTED_TRUE);
+                    mCallbacks.onSwipeThreeFinger();
+                }
+            }
+        }
+    }
+
+    private void changeThreeGestureState(int state) {
+        if (mThreeGestureState != state){
+            mThreeGestureState = state;
+            boolean shouldEnableProp = mThreeGestureState == THREE_GESTURE_STATE_DETECTED_TRUE ||
+                mThreeGestureState == THREE_GESTURE_STATE_DETECTING;
+            try {
+                SystemProperties.set("sys.android.screenshot", shouldEnableProp ? "true" : "false");
+            } catch(Exception e) {
+                Log.e(TAG, "Exception when setprop", e);
+            }
+        }
+    }
+
+    private boolean checkIsStartThreeGesture(MotionEvent event) {
+        if (event.getEventTime() - event.getDownTime() > 500) {
+            return false;
+        }
+        int height = mDisplayMetrics.heightPixels;
+        int width = mDisplayMetrics.widthPixels;
+        float minX = Float.MAX_VALUE;
+        float maxX = Float.MIN_VALUE;
+        float minY = Float.MAX_VALUE;
+        float maxY = Float.MIN_VALUE;
+        for (int i = 0; i < event.getPointerCount(); i++) {
+            float x = event.getX(i);
+            float y = event.getY(i);
+            if (y > ((float) (height - mThreshold))) {
+                return false;
+            }
+            maxX = Math.max(maxX, x);
+            minX = Math.min(minX, x);
+            maxY = Math.max(maxY, y);
+            minY = Math.min(minY, y);
+        }
+        if (maxY - minY <= mDisplayMetrics.density * 150.0f) {
+            return maxX - minX <= ((float) (width < height ? width : height));
+        }
+        return false;
+    }
+
+    interface Callbacks {
+        void onSwipeThreeFinger();
+    }
+}
-- 
2.38.1


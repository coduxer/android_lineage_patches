From 17b56a88f3277478a150135f83b327c748c1e5ca Mon Sep 17 00:00:00 2001
From: coduxer <coduxer@gmail.com>
Date: Wed, 9 Nov 2022 17:43:31 +0200
Subject: [PATCH] fwb: Implement cutout force full screen [1/2]

Change-Id: Ia9ad4239392b4864e5e580a3d16857ca94306ec8
---
 core/java/android/app/IActivityManager.aidl   |   5 +
 core/java/android/provider/Settings.java      |   6 +
 .../android/internal/policy/PhoneWindow.java  |  11 ++
 .../cutout/CutoutFullscreenController.java    | 105 ++++++++++++++++++
 .../metrics_constants/metrics_constants.proto |   4 +
 .../server/am/ActivityManagerService.java     |  15 +++
 6 files changed, 146 insertions(+)
 create mode 100644 core/java/com/android/internal/util/fork/cutout/CutoutFullscreenController.java

diff --git a/core/java/android/app/IActivityManager.aidl b/core/java/android/app/IActivityManager.aidl
index 18e1b0ff9a9b..763e14b35899 100644
--- a/core/java/android/app/IActivityManager.aidl
+++ b/core/java/android/app/IActivityManager.aidl
@@ -756,6 +756,11 @@ interface IActivityManager {
      */
     boolean isSwipeToScreenshotGestureActive();
 
+    /**
+     *  Force full screen for devices with cutout
+     */
+    boolean shouldForceCutoutFullscreen(in String packageName);
+
     /**
      * @return The reason code of whether or not the given UID should be exempted from background
      * restrictions here.
diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index aa40b9202c8a..06545f22e2fe 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -5781,6 +5781,12 @@ public final class Settings {
         @Deprecated
         public static final String PARENTAL_CONTROL_LAST_UPDATE = Secure.PARENTAL_CONTROL_LAST_UPDATE;
 
+        /**
+         * Force full screen for devices with cutout
+         * @hide
+         */
+        public static final String FORCE_FULLSCREEN_CUTOUT_APPS = "force_full_screen_cutout_apps";
+
         /**
          * @deprecated Use {@link android.provider.Settings.Secure#PARENTAL_CONTROL_REDIRECT_URL}
          * instead
diff --git a/core/java/com/android/internal/policy/PhoneWindow.java b/core/java/com/android/internal/policy/PhoneWindow.java
index 9c0fad902a52..2f68b65434ea 100644
--- a/core/java/com/android/internal/policy/PhoneWindow.java
+++ b/core/java/com/android/internal/policy/PhoneWindow.java
@@ -31,6 +31,7 @@ import static android.view.WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATIO
 import static android.view.WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS;
 import static android.view.WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS;
 import static android.view.WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT;
+import static android.view.WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES;
 import static android.view.WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_DRAW_BAR_BACKGROUNDS;
 import static android.view.WindowManager.LayoutParams.PRIVATE_FLAG_NO_MOVE_ANIMATION;
 
@@ -2541,6 +2542,16 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
             params.layoutInDisplayCutoutMode = mode;
         }
 
+        if (ActivityManager.isSystemReady()) {
+            try {
+                String packageName = context.getBasePackageName();
+                if (ActivityManager.getService().shouldForceCutoutFullscreen(packageName)){
+                    params.layoutInDisplayCutoutMode = LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES;
+                }
+            } catch (RemoteException e) {
+            }
+        }
+
         if (mAlwaysReadCloseOnTouchAttr || getContext().getApplicationInfo().targetSdkVersion
                 >= android.os.Build.VERSION_CODES.HONEYCOMB) {
             if (a.getBoolean(
diff --git a/core/java/com/android/internal/util/fork/cutout/CutoutFullscreenController.java b/core/java/com/android/internal/util/fork/cutout/CutoutFullscreenController.java
new file mode 100644
index 000000000000..90346b0ec475
--- /dev/null
+++ b/core/java/com/android/internal/util/fork/cutout/CutoutFullscreenController.java
@@ -0,0 +1,105 @@
+/**
+ * Copyright (C) 2018 The LineageOS project
+ * Copyright (C) 2019 The PixelExperience project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.internal.util.fork.cutout;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.res.Resources;
+import android.database.ContentObserver;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.UserHandle;
+import android.text.TextUtils;
+
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Set;
+
+import android.provider.Settings;
+
+public class CutoutFullscreenController extends ContentObserver {
+    private Set<String> mApps = new HashSet<>();
+    private Context mContext;
+
+    private final boolean isAvailable;
+
+    public CutoutFullscreenController(Handler handler, Context context) {
+        super(handler);
+        mContext = context;
+
+	    final String displayCutout =
+            mContext.getResources().getString(com.android.internal.R.string.config_mainBuiltInDisplayCutout);
+        isAvailable = !TextUtils.isEmpty(displayCutout);
+    }
+
+    public void registerObserver() {
+        if (isAvailable) {
+            mContext.getContentResolver().registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.FORCE_FULLSCREEN_CUTOUT_APPS), false, this,
+                    UserHandle.USER_ALL);
+
+            update();
+        }
+    }
+
+    public boolean isSupported() {
+        return isAvailable;
+    }
+
+    public boolean shouldForceCutoutFullscreen(String packageName) {
+        return isSupported() && mApps.contains(packageName);
+    }
+
+    public Set<String> getApps() {
+        return mApps;
+    }
+
+    public void addApp(String packageName) {
+        mApps.add(packageName);
+        Settings.System.putString(mContext.getContentResolver(),
+                Settings.System.FORCE_FULLSCREEN_CUTOUT_APPS, String.join(",", mApps));
+    }
+
+    public void removeApp(String packageName) {
+        mApps.remove(packageName);
+        Settings.System.putString(mContext.getContentResolver(),
+                Settings.System.FORCE_FULLSCREEN_CUTOUT_APPS, String.join(",", mApps));
+    }
+
+    public void setApps(Set<String> apps) {
+        mApps = apps;
+    }
+
+    @Override
+    public void onChange(boolean selfChange) {
+        update();
+    }
+
+    private void update() {
+        ContentResolver resolver = mContext.getContentResolver();
+
+        String apps = Settings.System.getStringForUser(resolver,
+                Settings.System.FORCE_FULLSCREEN_CUTOUT_APPS,
+                UserHandle.USER_CURRENT);
+        if (apps != null) {
+            setApps(new HashSet<>(Arrays.asList(apps.split(","))));
+        } else {
+            setApps(new HashSet<>());
+        }
+    }
+}
diff --git a/proto/src/metrics_constants/metrics_constants.proto b/proto/src/metrics_constants/metrics_constants.proto
index 3801c2473c11..594b88736aa9 100644
--- a/proto/src/metrics_constants/metrics_constants.proto
+++ b/proto/src/metrics_constants/metrics_constants.proto
@@ -7437,5 +7437,9 @@ message MetricsEvent {
     // ---- End Q Constants, all Q constants go above this line ----
     // Add new aosp constants above this line.
     // END OF AOSP CONSTANTS
+
+    // Fork Lineage
+    FORKLINEAGE = 3000;
+
   }
 }
diff --git a/services/core/java/com/android/server/am/ActivityManagerService.java b/services/core/java/com/android/server/am/ActivityManagerService.java
index e2fb5b242188..89ebcae726de 100644
--- a/services/core/java/com/android/server/am/ActivityManagerService.java
+++ b/services/core/java/com/android/server/am/ActivityManagerService.java
@@ -425,6 +425,8 @@ import com.android.server.wm.WindowManagerInternal;
 import com.android.server.wm.WindowManagerService;
 import com.android.server.wm.WindowProcessController;
 
+import com.android.internal.util.fork.cutout.CutoutFullscreenController;
+
 import dalvik.annotation.optimization.NeverCompile;
 import dalvik.system.VMRuntime;
 
@@ -1561,6 +1563,8 @@ public class ActivityManagerService extends IActivityManager.Stub
     final SwipeToScreenshotObserver mSwipeToScreenshotObserver;
     private boolean mIsSwipeToScrenshotEnabled;
 
+    private CutoutFullscreenController mCutoutFullscreenController;
+
     /**
      * Used to notify activity lifecycle events.
      */
@@ -2356,6 +2360,7 @@ public class ActivityManagerService extends IActivityManager.Stub
         mUseFifoUiScheduling = false;
         mEnableOffloadQueue = false;
         mSwipeToScreenshotObserver = null;
+        mCutoutFullscreenController = null;
         mFgBroadcastQueue = mBgBroadcastQueue = mBgOffloadBroadcastQueue =
                 mFgOffloadBroadcastQueue = null;
         mComponentAliasResolver = new ComponentAliasResolver(this);
@@ -2491,6 +2496,8 @@ public class ActivityManagerService extends IActivityManager.Stub
         mInternal = new LocalService();
         mPendingStartActivityUids = new PendingStartActivityUids(mContext);
         mSwipeToScreenshotObserver = new SwipeToScreenshotObserver(mHandler, mContext);
+        // Force full screen for devices with cutout
+        mCutoutFullscreenController = new CutoutFullscreenController(mHandler, mContext);
         mTraceErrorLogger = new TraceErrorLogger();
         mComponentAliasResolver = new ComponentAliasResolver(this);
     }
@@ -8040,6 +8047,7 @@ public class ActivityManagerService extends IActivityManager.Stub
         mAppErrors.loadAppsNotReportingCrashesFromConfig(res.getString(
                 com.android.internal.R.string.config_appsNotReportingCrashes));
         mSwipeToScreenshotObserver.registerObserver();
+        mCutoutFullscreenController.registerObserver();
     }
 
     /**
@@ -18518,4 +18526,11 @@ public class ActivityManagerService extends IActivityManager.Stub
             return mIsSwipeToScrenshotEnabled && SystemProperties.getBoolean("sys.android.screenshot", false);
         }
     }
+
+    @Override
+    public boolean shouldForceCutoutFullscreen(String packageName) {
+        synchronized (this) {
+            return mCutoutFullscreenController.shouldForceCutoutFullscreen(packageName);
+        }
+    }
 }
-- 
2.38.1

